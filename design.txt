Design:

I took the infrastructure from pset7 with the login/logout and register features.  Then I modeled our map off of pset8, so I used a lot of the scripts.js file
with some modifications.  The app uses flask for the back-end. Flask renders the templates in the directory templates with the help of Jinja. These templates include our home page (index.html),
about page (about.html), map page (map.html), my colleges page (mycolleges.html), calendar (calendar.html), sign up form (sign_up.html), and login form (login.html).

I used the Google Maps API to embed a map into map.html.  I used the US.txt file from pset8 and uploaded it to the database into the table "places".
In addition, I used the U.S. Dept of Education's college scorecard data (https://collegescorecard.ed.gov/data/) to get data on all of the colleges
in the U.S.  I imported this csv to phpliteadmin in "college_data" and then added some of that data to "places".  So then you can search for colleges, cities,
and zip codes in the search bar on the map page.  

I also added filters using a global object called conditions in map_scripts.js.  These conditions change when the user clicks on checkboxes for different
characteristics in colleges such as public/private.  When checkboxes are clicked, they change the condition and call update, a function that uses ajax to 
send the conditions object to application.py where the python function update() uses the condition information to add to the database query for colleges to add
as markers on the map.  

The function addMarker in map_scripts.js adds markers at the college's latitude and longitude.  It is called by update, which is called many times in configure and 
after clicks in eventhandlers. addMarker also adds the name of the college linked to the college's website and the admission rate (if there is one), all accessed through the JSON returned by ajax in update.
showInfo is called in addMarker and displays this html string, along with an add college button.  When this button is clicked, ajax passes the name of the college to the addcolleges()
function in application.py, where it inserts the college into a table created upon sign up for the user. This table is queried and displayed in mycolleges.html.
This table is sorttable alphabetically and numerically by clicking on the column headers (this feature was taken from online, see sorttable.js for details).

Calendar info:

The home page is a simple html page with buttons that link to different college resources.

The about page is another simple html page with our bios.

Design:

In the code, there are lots of commented out portions and files for unfinished features like Google SignIn.  I left the code there in case I decide to put the website
online and add these features back in (I wouldn't want the hours I spent on them to go to waste).  As with any project, there is always more to do, so many comments
you'll see as you read through the code are also reminders of ideas for other features that could be included there.